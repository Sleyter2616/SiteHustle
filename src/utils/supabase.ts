import { createClient } from '@supabase/supabase-js';
import { Pillar1Data } from '@/types/pillar1';

// Initialize Supabase client
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

export async function savePillar1Data(userId: string, data: Pillar1Data | null): Promise<void> {
  if (!data) return;

  try {
    const { error } = await supabase
      .from('pillar1_data')
      .upsert({
        user_id: userId,
        data: data,
        updated_at: new Date().toISOString()
      });

    if (error) throw error;
  } catch (error) {
    console.error('Error saving pillar 1 data:', error);
    throw error;
  }
}

export async function loadPillar1Data(userId: string): Promise<Pillar1Data | null> {
  try {
    const { data, error } = await supabase
      .from('pillar1_data')
      .select('data')
      .eq('user_id', userId)
      .single();

    if (error) throw error;
    return data?.data || null;
  } catch (error) {
    console.error('Error loading pillar 1 data:', error);
    return null;
  }
}

// SQL to create the table:
/*
create table pillar1_data (
  id bigint generated by default as identity primary key,
  user_id text not null references auth.users(id),
  data jsonb not null,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Add RLS policies
alter table pillar1_data enable row level security;

create policy "Users can insert their own pillar1 data."
  on pillar1_data for insert
  with check (auth.uid() = user_id);

create policy "Users can update their own pillar1 data."
  on pillar1_data for update
  using (auth.uid() = user_id);

create policy "Users can read their own pillar1 data."
  on pillar1_data for select
  using (auth.uid() = user_id);
*/
